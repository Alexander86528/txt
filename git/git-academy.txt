
﻿Видеокурс по Git
Словарь основных терминов
[https://htmlacademy.ru/blog/81-git-and-github-glossary]

================================================================================
02. Как сделать репозиторий из любого проекта.mp4
git config 00:00:43
глобальная конфигурация
git init 00:01:50
git status 00:02:26
  показывает в каком состоянии репозиторий.
git add 00:03:50
git commit 00:04:26

git diff 00:05:28
  difference-разница, показывает что изменилось в файле.
git diff --staged 00:03:16
  просмотр для проиндексированных, но не зафиксированных файлов

git log 00:06:40
  показывает историю коммитов
git show 00:07:07
  показывает какие изменения зафиксированны в коммите.
================================================================================

03. Что делать, если все пошло не так.mp4

Откат для файлов изменённых(modified), но не зафиксированных(commited).
git checkout <name file> 00:00:38

Для файлов удалённых но не зафиксированных(commited).
git checkout <name file> 00:01:03

git checkout <хеш> <name file> 00:02:16
откат состояния файла по хешу коммита, восстановление файла


git reset HEAD <name file> 00:04:31
  для проиндексированных файлов(чтобы убрать из индекса) перед коммитом.

git commit --amend -m  00:07:54
  изменение сообщения последнего коммита

git rm <name file>  00:09:45
git commit --amend --no-edit 00:11:03 ?
  удаление файла из папки и из коммита

1) git rm --cached <file path>(путь к файлу) 00:11:59
2) git commit --amend --no-edit
удаление файла из коммита, но не из папки

git help 00:14:02
================================================================================

04. Зачем и как создавать ветки.mp4

Команда git log показывает историю коммитов.
git log --oneline 00:01:27
git log --oneline --all
git log --oneline --all --graph

Показывает содержимое коммита
git cat-file -p <hash>  00:01:39

Переключение на состояние(снимок) коммита(detached HEAD)
git checkout <hash> 00:03:51

Создаёт ветку с текущего коммита
1) git branch <name branch> 00:11:10 // Создаёт ветку
2) git checkout -b <name branch> // Создаёт ветку и переключается на неё
<name branch> - имя новой ветки

Создаёт ветку с коммита по хешу и переключается на него 00:04:47
git checkout -b <name> <hesh>
<name> - имя указателя(ветки)
Переместить указатель и создать имя указателя на коммит хеш которого указан.
Так же создаётся ветка начиная с коммита хеш которого указан.

git switch -
отменяет операцию переключения на снимок
Для возвращения в предыдущую ветку (со сбросом всех изменений) используйте
команду "git switch -"
Если вы все же хотите сохранить свои изменения, внесенные в состоянии 
"detached HEAD", и продолжить работу с этого места, можете использовать 
git switch -c <имя-новой-ветки>, чтобы создать новую ветку из этой точки

git log --oneline --all  00:05:48

git merge <name branch> -m "Коментарий" 00:10:20
<name branch> - имя ветки которую объединяем

================================================================================
05. Откуда берутся конфликты, и что с ними делать.mp4


================================================================================
06. Как выложить код в GitHub и настроить SSH-ключи
регистрация на гитхаб 00:00:55
публикация проекта 00:01:32


создание репо 00:01:35
публикация локального репо на гитхабе 00:02:22
git remote add origin ........(см. на странице создания репо на гитхаб)
git remote -v 00:03:25
ssh 00:04:50
генерация ключей для гит и гитхаб 00:04:59
ssh-keygen -t rsa -b 4096 -C "e-mail"
cat <name file> 00:06:42
для загрузки публичного ключа на гитхаб

проверка 00:06:57
из папки .ssh
ssh -T -i ~/.ssh/github-14-05-2022 git@github.com 


При добавлении ещё одного репозитория ключи ssh на новом не работают.
Решение:
Подключил новый репозиторий по https
Отправил с  локального на удалённый репозиторий по https
Cоздал ключи ssh заново - заработали на обоих репо.

изменения с ssh на https
проверить настройки:
git remote -v
вывод:
origin  git@github.com:kub060522/1696673-sedona-34.git (fetch)
origin  git@github.com:kub060522/1696673-sedona-34.git (push)
удаляет настройки
git remote rm origin
создать новые настройки:
git remote add origin https://github.com/kub060522/1696673-sedona-34.git


================================================================================
07. Как синхронизировать работу на двух компьютерах

Клонирование 00:02:32

Отправка коммитов в удалённый репозиторий 00:04:17
git push origin <name branch>
<name branch> - имя ветки в которую отправляем изменения

Создание новой ветки и отправка на Гитхаб 00:04:55
git push origin <name branch>

исправление названия ветки 00:05:59
git push origin <name>:<name>

Удаление ветки с гитхаба 00:06:44
git push origin :<name>

Переименование локальнрй ветки 00:07:11
git branch -m <name>

Получение новой ветки и изменений с гитхаб 00:07:58
1. git fetch origin
2. git checkout -b comments origin/comments

Получения из удалённого репозитария 00:07:43
git pull origin main - или имя ветки которую надо получить

================================================================================
08. Как предложить свой код в любой проект
 

































